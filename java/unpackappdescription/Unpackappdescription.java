//------------------------------------------------------------------------------
// Unpack an app description - code generated by AppaAppsPhotoApp.pm
// Philip R Brenan at gmail dot com, Appa Apps Ltd, 2017
//------------------------------------------------------------------------------
package com.appaapps  ;
import  java.io.File;
import  java.util.Stack;
import  java.util.TreeMap;

public class Unpackappdescription extends Thread                                //C A thread to unpack an app description
 {final File[]zipFile;                                                          // Name of the zip file containing the app
  final public String [] speechEmphasis = {"normal", "emphasis"};               // Speech variants
  byte[]  manifestContent;                                                      // Input data to be parsed to create data structures described by manifest in zip file
  int     index = 0;                                                            // Position in input
  boolean finishedManifest() {return index >= manifestContent.length;}          // No more input to parse in the manifest
  AppCmd  mainAppCmd   = null;                                                  // The first app cmd
  String[]speakers     = null;                                                  // The speakers associated with the first (and hopefully only) app defined

  int getLength()                                                               //M Get a BER encoded integer from the byte stream
   {int i = 0;
    for(int j = 0; j < 16; ++j)                                                 // Each byte of the BER encoded integer
     {int b = manifestContent[index++];                                         // Current byte
      i *= 128;
      if (b >= 0) {i += b; break;}
      else         i += 128+b;
     }
    return i;
   }

  String getString()                                                            //M Next string
   {final int length = getLength();                                             // Length of next item
    try
     {final String s = new String(manifestContent, index, length, "utf-8");     // Decode utf8 string
//for(int i = index; i < index+length; ++i) say(" i=", i, " b=", String.format("%02X ",manifestContent[i]), " c=", String.format("%c", (char)manifestContent[i]));
      index += length;                                                          // Advance
//say("getString ", s);
      return s;                                                                 // Return next string
     }
    catch(Exception e)
     {say(e); e.printStackTrace();
     }
    return null;
   }

  int getInteger()                                                              //M Next integer
   {final String s = getString();
    try                                                                         // Not a command so it must be an integer
     {return Integer.parseInt(s);
     }
    catch(Exception e)
     {failed("Unable to convert item to integer while processing manifest,"+
             " string: "+ s + " because: "+ e);
     }
    return -1;                                                                  // This should not happen because these kinds of errors are detected when the manifest is created
   }

  public class Cmd                                                              //C Generic command
   {public String name;                                                         // Name of command
    public PhotoBytes photoBytes;                                               // Image content for this cmd
    public TreeMap<String,byte[]> soundBytes;                                   // Sound content for this cmd by speaker name + speaker variant or sounds/ if the author has supplied a sound file
   }

  public Cmd [] cmds;                                                           // Commands loaded
  public class PhotoFact                                                        //C Description of a photo fact
   {public final PhotoCmd photoCmd;                                             // Referenced photo
    public final FactCmd  factCmd;                                              // Referenced fact
    PhotoFact(PhotoCmd PhotoCmd, FactCmd FactCmd)
     {photoCmd = PhotoCmd;
      factCmd  = FactCmd;
     }
    public String toString()                                                    //M PhotoFact as string
     {return '('+photoCmd.title+','+factCmd.title+')';
     }
   }

  public PhotoFact [] photoFacts;                                               // Multiplied table of all valid combinations of photos and facts
  void loadPhotoFacts()                                                         //M Load fatcs for each photo
   {photoFacts = new PhotoFact[photoFactCmd.length];
    final TreeMap<String,PhotoCmd> photos = new TreeMap<String,PhotoCmd>();
    final TreeMap<String,FactCmd>  facts  = new TreeMap<String,FactCmd>();

    for(PhotoCmd p : photoCmd) if (p.name != null) photos.put(p.name, p);
    for(FactCmd  f : factCmd ) if (f.name != null) facts .put(f.name, f);

    for(int i = 0; i < photoFactCmd.length; ++i)
     {final PhotoFactCmd q = photoFactCmd[i];
      if (q == null) continue;
      final PhotoCmd     p = photos.get(q.name);
      final FactCmd      f = facts.get(q.title);
      if (p != null && f != null) photoFacts[i] = new PhotoFact(p, f);
     }
   }
 
  public class AppCmd extends Cmd {                                             // Outline description of an app
    public String author;                                                       // <p>The name of the person who wrote this app which should be the name of the repository containing the app. Thus if the name of the repository is: <p><table border=0> philiprbrenan/GoneFishing </table> <p>then the author of the app will be: <p><table border=0> philiprbrenan </table> <p>The app generation process will inform you of the correct name if you get it wrong.
    public String description;                                                  // <p>A slightly longer description for the app often used for the short description on <a href="https://play.google.com/store"><bold>Google Play</bold></a>.
    public String email;                                                        // <p>The email address of this app so that students have somewhere to send suggestions, corrections or complaints
    public Integer emphasis;                                                    // <p>Generate slower, more emphatic speech for some items so that a student who did not understand the normal fast speech version can be given a slower, more comprehensible version on redirect. <p>Code a number for the value of this keyword: any phrase that has fewer characters than this number will cause both normal and emphasized versions of the speech to be generated. Phrases longer than this number will only cause a normal version of the speech to be generated. <p>If you omit this keyword or code a value of zero then only normal speech versions will be generated.
    public String enables;                                                      // <p>The names of apps that the user might enjoy playing after completing this app. If the student appears to have mastered all the material in this app the app will start playing one of these apps instead.
    public String fullNameOnGooglePlay;                                         // <p>The full name of the the app on <a href="https://play.google.com/store"><bold>Google Play</bold></a>. This is set by default for you to the standard value of: <b><reverseDomain>.photoapp</b>.&lt;github path to your sourceFile.txt&gt; <p>Use this keyword to change this name to something else in the unlikely event that you want to use a different name on Google Play for your app.
    public String help;                                                         // <p>Use this keyword to specify the URL of a web page where the student can find more information about the app, its purpose, how to use it, who wrote it, the sponsoring organizations, their contact details etc. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword.
    public String icon;                                                         // <p>If the URL starts with <b>https?://</b> then this is the location of the icon image on the World Wide Web from whence it will be copied and scaled to the right size. If the URL starts with <b>github:</b> it comes from the specified repository on <a href="https://github.com">GitHub</a>. Otherwise it is the name of the file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app which contains the icon for this app.
    public String imageFormat;                                                  // <p>By default use the <b>jpx</b> (jpeg extended) image format to display photos at high resolution on the Android. Your <b>jpg</b> and <b>png</b> images will be automatically converted to use the <b>jpx</b> format by the app build process so no action is required of you to use this format. <p>If you do not want to use <b>jpx</b>, code this keyword with a value of <b>jpg</b> to instruct the build process to use the <b>jpg</b> format to represent images. If you supply photos in the <b>png</b> format the build process will automatically convert them to <b>jpg</b> for you for use on Android.
    public String language;                                                     // <p>The <a href="AWSPollySpeakers.html#speakersByCode">two character code</a> which describes the language this app is written in. All the voices that speak this language will be used to speak the app unless the <a href="http://www.appaapps.com/howToWriteAnApp.html#cmdKeyDef_app_speakers">app.speakers=</a> keyword is used to specify the speakers that you actually require. <p>The one exception to this rule is English, which is spoken by just Amy and Brian unless you specify otherwise.
    public Integer levels;                                                      // <p>The number of levels in the game. Each photo has a level and only comes into play when the student reaches that level of play. You can specify the level for each photo manually using the <a href="#cmdKeyDef_photo_level">photo.level=</a> keyword. Or you can use this keyword to specify the number of levels in the game and have the app generation system allocate photos to each level based on their position in <a href="#sft"><bold>sourceFile.txt</bold></a>. <p>If the number of levels is not specified it defaults to one: in this case all the photos are in play as soon as the app starts.
    public String logoText;                                                     // <p>When the app starts for the first time it downloads its content from the Internet which might take a moment or two. The app covers any delay by showing the name of the app and the name of the sponsoring organization on the splash screen. <p> Use this keyword to show a small amount of text identifying your organization. The app will scale this text to fit the screen, so if you want the name to be in large visible letters it must contain only a few characters. Conversely, long names will be shrunk down to fit the display and will probably be unreadable. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_help"> app.help= </a> keyword.
    public String maxImages;                                                    // <p>The maximum number of images to show in one selection at a time in the app: choose a value that reflects how many images a competent student might reasonably scan in 30 seconds
    public Integer maximumRaceSize;                                             // <p>The maximum possible number of questions that can occur in a race. Otherwise, the default is the total number of <a href="#cmdDef_photo">photo</a> commands in the app. However, the student will only be faced with the maximum possible number of questions once they have made considerable progress through the material in the app as races are restricted to information that the student has already encountered.
    public String name;                                                         // A short name for this app which matches the path in your repository to the relevant <a href="#sft"><bold>sourceFile.txt</bold></a> with all the forward slashes replaced by dots. Thus, if the full name of the source file in the repository is: <p><table border=0> philiprbrenan/GoneFishing/l/en/sourcefile.txt </table> <p>then the name of the app will be: <p><table border=0> GoneFishing.l.en </table> <p>The app generation process will inform you of the correct name if you get it wrong.
    public String ordered;                                                      // The next item to be presented to the student will be chosen in some kind of order if this keyword is coded: <p><dl> <dt>always</dt> <dd>The items tend to be presented in the order they are written in the app definition file. </dd> <dt>finally</dt> <dd>The opposite of <b>initially</b>. The items are initially presented in random order but the order is applied ever more strictly as play proceeds. </dd> <dt>initially</dt> <dd>As with <b>always</b>, the items are initially presented in order, but the order is applied less and less strictly as play proceeds. </dd> <dt>never</dt> <dd>The opposite of <b>always</b>. The order of the items is not considered to be important. This is equivalent to not coding this keyword or commenting it out.</dd> </dl>
    public String prerequisites;                                                // <p>The names of apps that perhaps the user ought to play first, listed in play order separated by spaces. If the student does not appear to be making much progress with the existing app, the app will start playing one of these apps instead.
    public Integer rightInARow;                                                 // <p>The number of questions the student must answer correctly in a row to trigger race mode. <p id=normalPlayMode>In normal play the student receives new items of information every time they answer a question correctly the first time the question is posed; otherwise answers are provided for questions that the student is unable to answer correctly. <p id=raceMode>During a race, no new items of information are presented: the race continues as long as the student does not make too many mistakes or until all the items that the student has previously identified correctly have been presented. Race mode questions are presented with less delay than normal questions. <p>The race starts with well known items and with quiet background music. As the race proceeds, the music gets louder and the questions become more difficult as measured by how often the student has correctly identified the items in the past. <p>The objective of a race is to set a personal best time for completing a race through all the items in the app without errors. <p>At the end of race, the student is congratulated if they did not make too many mistakes. Play then reverts to normal mode.
    public String saveScreenShotsTo;                                            // <p>Code this keyword in the unlikely event that if you would like screen shots taken in the app to be saved to a different <a href="https://github.com">GitHub</a> repository. Code the <a href="https://github.com">GitHub</a> user name, followed by '/', the repository name, optionally followed by a path which will be prefixed to the screen shot name. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
    public String screenShots;                                                  // <p>Screen shot mode is enabled if this keyword is present with any value or indeed no value. See: the <a href="#cmdKeyDef_photo_screenShot"> photo.screenShot= </a> keyword for full details. <p>See also the <a href="#cmdKeyDef_app_saveScreenShotsTo"> app.saveScreenShotsTo= </a> keyword for details of how to specify an alternate repository in which to save screen shots.
    public String speaker;                                                      // <p>If this keyword is present the app shows all the items in alphabetical order and says the item the user taps on. This is useful for app development and also if you have temporarily lost your voice
    public String speakers;                                                     // <p>The <a href="AWSPollySpeakers.html#speakersByName">Ids</a> of the voices to be used to speak the app or all the speakers in the language set by <a href="#cmdKeyDef_app_language">app.language=</a> keyword.
    public String test;                                                         // <p>Once you have created and published an app any further successful changes to this app will be transmitted directly to your active students. You might prefer to test the new version of your app first before making the changes publicly visible. To achieve this, code: <p>test = a description of the changes <p>Once you are satisfied with the changes you have made, you should comment out this keyword as in: <p># test = a description of the changes <p>so that a succcessful generation will update all active copies of the app. You might find it helpful to update the <a href="#cmdKeyDef_app_version">app.version=</a> to describe the new features in the app for posterity. <p>Please note that <b>test</b> apps will be deleted without notice from servers to free space if necessary.
    public String title;                                                        // <p>The title for this app. This title will be displayed on the splash screen when the app starts for the first time and also under the icon representing this app on the student's phone or tablet. The title should be short, like a newspaper headline, as in: <p><table border=0 cellspacing=10 class=codeBack> <tr><td align=center class=codeBack><image src="images/sampleIcon.png" width=64 height=64> <tr><td align=center class=codeBack>Robots Invade London </table> <p>See the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword for details of how you can further modify the splash screen.
    public String translations;                                                 // <p>Offer the user a choice of languages in which the app can be played. The <a href="#sft"><bold>sourceFile.txt</bold></a> files for the translated apps should be held in folders <b>l/LC</b>below the main source file for the app where <b>LC</b> is the two letter language code as shown in: <a href="AWSPollySpeakers.html#speakersByCode">speakers by code</a>. <p>If <b>all</b> is chosen as the value of this keyword, then all the languages supported by <AWSPolly> will be offered.
    public String version;                                                      // <p>A sentence describing what is in this version of the app. See all also the <a href="#cmdKeyDef_app_test">app.test=</a> keyword.
    public AppCmd                                                               //M Load data for AppCmd
     (int Index)                                                                //P Index of command to load
     {index = Index;                                                            // Index of this AppCmd amongst all AppCmd
      for(; !finishedManifest();)                                               // Successive items
       {final String key = getString();                                         // Keyword name
        if (false) {}
        else if (key.equalsIgnoreCase("author"))                                // <p>The name of the person who wrote this app which should be the name of the repository containing the app. Thus if the name of the repository is: <p><table border=0> philiprbrenan/GoneFishing </table> <p>then the author of the app will be: <p><table border=0> philiprbrenan </table> <p>The app generation process will inform you of the correct name if you get it wrong.
          author = getString();
        else if (key.equalsIgnoreCase("description"))                           // <p>A slightly longer description for the app often used for the short description on <a href="https://play.google.com/store"><bold>Google Play</bold></a>.
          description = getString();
        else if (key.equalsIgnoreCase("email"))                                 // <p>The email address of this app so that students have somewhere to send suggestions, corrections or complaints
          email = getString();
        else if (key.equalsIgnoreCase("emphasis"))                              // <p>Generate slower, more emphatic speech for some items so that a student who did not understand the normal fast speech version can be given a slower, more comprehensible version on redirect. <p>Code a number for the value of this keyword: any phrase that has fewer characters than this number will cause both normal and emphasized versions of the speech to be generated. Phrases longer than this number will only cause a normal version of the speech to be generated. <p>If you omit this keyword or code a value of zero then only normal speech versions will be generated.
          emphasis = getInteger();
        else if (key.equalsIgnoreCase("enables"))                               // <p>The names of apps that the user might enjoy playing after completing this app. If the student appears to have mastered all the material in this app the app will start playing one of these apps instead.
          enables = getString();
        else if (key.equalsIgnoreCase("fullNameOnGooglePlay"))                  // <p>The full name of the the app on <a href="https://play.google.com/store"><bold>Google Play</bold></a>. This is set by default for you to the standard value of: <b><reverseDomain>.photoapp</b>.&lt;github path to your sourceFile.txt&gt; <p>Use this keyword to change this name to something else in the unlikely event that you want to use a different name on Google Play for your app.
          fullNameOnGooglePlay = getString();
        else if (key.equalsIgnoreCase("help"))                                  // <p>Use this keyword to specify the URL of a web page where the student can find more information about the app, its purpose, how to use it, who wrote it, the sponsoring organizations, their contact details etc. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword.
          help = getString();
        else if (key.equalsIgnoreCase("icon"))                                  // <p>If the URL starts with <b>https?://</b> then this is the location of the icon image on the World Wide Web from whence it will be copied and scaled to the right size. If the URL starts with <b>github:</b> it comes from the specified repository on <a href="https://github.com">GitHub</a>. Otherwise it is the name of the file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app which contains the icon for this app.
          icon = getString();
        else if (key.equalsIgnoreCase("imageFormat"))                           // <p>By default use the <b>jpx</b> (jpeg extended) image format to display photos at high resolution on the Android. Your <b>jpg</b> and <b>png</b> images will be automatically converted to use the <b>jpx</b> format by the app build process so no action is required of you to use this format. <p>If you do not want to use <b>jpx</b>, code this keyword with a value of <b>jpg</b> to instruct the build process to use the <b>jpg</b> format to represent images. If you supply photos in the <b>png</b> format the build process will automatically convert them to <b>jpg</b> for you for use on Android.
          imageFormat = getString();
        else if (key.equalsIgnoreCase("language"))                              // <p>The <a href="AWSPollySpeakers.html#speakersByCode">two character code</a> which describes the language this app is written in. All the voices that speak this language will be used to speak the app unless the <a href="http://www.appaapps.com/howToWriteAnApp.html#cmdKeyDef_app_speakers">app.speakers=</a> keyword is used to specify the speakers that you actually require. <p>The one exception to this rule is English, which is spoken by just Amy and Brian unless you specify otherwise.
          language = getString();
        else if (key.equalsIgnoreCase("levels"))                                // <p>The number of levels in the game. Each photo has a level and only comes into play when the student reaches that level of play. You can specify the level for each photo manually using the <a href="#cmdKeyDef_photo_level">photo.level=</a> keyword. Or you can use this keyword to specify the number of levels in the game and have the app generation system allocate photos to each level based on their position in <a href="#sft"><bold>sourceFile.txt</bold></a>. <p>If the number of levels is not specified it defaults to one: in this case all the photos are in play as soon as the app starts.
          levels = getInteger();
        else if (key.equalsIgnoreCase("logoText"))                              // <p>When the app starts for the first time it downloads its content from the Internet which might take a moment or two. The app covers any delay by showing the name of the app and the name of the sponsoring organization on the splash screen. <p> Use this keyword to show a small amount of text identifying your organization. The app will scale this text to fit the screen, so if you want the name to be in large visible letters it must contain only a few characters. Conversely, long names will be shrunk down to fit the display and will probably be unreadable. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_help"> app.help= </a> keyword.
          logoText = getString();
        else if (key.equalsIgnoreCase("maxImages"))                             // <p>The maximum number of images to show in one selection at a time in the app: choose a value that reflects how many images a competent student might reasonably scan in 30 seconds
          maxImages = getString();
        else if (key.equalsIgnoreCase("maximumRaceSize"))                       // <p>The maximum possible number of questions that can occur in a race. Otherwise, the default is the total number of <a href="#cmdDef_photo">photo</a> commands in the app. However, the student will only be faced with the maximum possible number of questions once they have made considerable progress through the material in the app as races are restricted to information that the student has already encountered.
          maximumRaceSize = getInteger();
        else if (key.equalsIgnoreCase("name"))                                  // A short name for this app which matches the path in your repository to the relevant <a href="#sft"><bold>sourceFile.txt</bold></a> with all the forward slashes replaced by dots. Thus, if the full name of the source file in the repository is: <p><table border=0> philiprbrenan/GoneFishing/l/en/sourcefile.txt </table> <p>then the name of the app will be: <p><table border=0> GoneFishing.l.en </table> <p>The app generation process will inform you of the correct name if you get it wrong.
          name = getString();
        else if (key.equalsIgnoreCase("ordered"))                               // The next item to be presented to the student will be chosen in some kind of order if this keyword is coded: <p><dl> <dt>always</dt> <dd>The items tend to be presented in the order they are written in the app definition file. </dd> <dt>finally</dt> <dd>The opposite of <b>initially</b>. The items are initially presented in random order but the order is applied ever more strictly as play proceeds. </dd> <dt>initially</dt> <dd>As with <b>always</b>, the items are initially presented in order, but the order is applied less and less strictly as play proceeds. </dd> <dt>never</dt> <dd>The opposite of <b>always</b>. The order of the items is not considered to be important. This is equivalent to not coding this keyword or commenting it out.</dd> </dl>
          ordered = getString();
        else if (key.equalsIgnoreCase("prerequisites"))                         // <p>The names of apps that perhaps the user ought to play first, listed in play order separated by spaces. If the student does not appear to be making much progress with the existing app, the app will start playing one of these apps instead.
          prerequisites = getString();
        else if (key.equalsIgnoreCase("rightInARow"))                           // <p>The number of questions the student must answer correctly in a row to trigger race mode. <p id=normalPlayMode>In normal play the student receives new items of information every time they answer a question correctly the first time the question is posed; otherwise answers are provided for questions that the student is unable to answer correctly. <p id=raceMode>During a race, no new items of information are presented: the race continues as long as the student does not make too many mistakes or until all the items that the student has previously identified correctly have been presented. Race mode questions are presented with less delay than normal questions. <p>The race starts with well known items and with quiet background music. As the race proceeds, the music gets louder and the questions become more difficult as measured by how often the student has correctly identified the items in the past. <p>The objective of a race is to set a personal best time for completing a race through all the items in the app without errors. <p>At the end of race, the student is congratulated if they did not make too many mistakes. Play then reverts to normal mode.
          rightInARow = getInteger();
        else if (key.equalsIgnoreCase("saveScreenShotsTo"))                     // <p>Code this keyword in the unlikely event that if you would like screen shots taken in the app to be saved to a different <a href="https://github.com">GitHub</a> repository. Code the <a href="https://github.com">GitHub</a> user name, followed by '/', the repository name, optionally followed by a path which will be prefixed to the screen shot name. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
          saveScreenShotsTo = getString();
        else if (key.equalsIgnoreCase("screenShots"))                           // <p>Screen shot mode is enabled if this keyword is present with any value or indeed no value. See: the <a href="#cmdKeyDef_photo_screenShot"> photo.screenShot= </a> keyword for full details. <p>See also the <a href="#cmdKeyDef_app_saveScreenShotsTo"> app.saveScreenShotsTo= </a> keyword for details of how to specify an alternate repository in which to save screen shots.
          screenShots = getString();
        else if (key.equalsIgnoreCase("speaker"))                               // <p>If this keyword is present the app shows all the items in alphabetical order and says the item the user taps on. This is useful for app development and also if you have temporarily lost your voice
          speaker = getString();
        else if (key.equalsIgnoreCase("speakers"))                              // <p>The <a href="AWSPollySpeakers.html#speakersByName">Ids</a> of the voices to be used to speak the app or all the speakers in the language set by <a href="#cmdKeyDef_app_language">app.language=</a> keyword.
          speakers = getString();
        else if (key.equalsIgnoreCase("test"))                                  // <p>Once you have created and published an app any further successful changes to this app will be transmitted directly to your active students. You might prefer to test the new version of your app first before making the changes publicly visible. To achieve this, code: <p>test = a description of the changes <p>Once you are satisfied with the changes you have made, you should comment out this keyword as in: <p># test = a description of the changes <p>so that a succcessful generation will update all active copies of the app. You might find it helpful to update the <a href="#cmdKeyDef_app_version">app.version=</a> to describe the new features in the app for posterity. <p>Please note that <b>test</b> apps will be deleted without notice from servers to free space if necessary.
          test = getString();
        else if (key.equalsIgnoreCase("title"))                                 // <p>The title for this app. This title will be displayed on the splash screen when the app starts for the first time and also under the icon representing this app on the student's phone or tablet. The title should be short, like a newspaper headline, as in: <p><table border=0 cellspacing=10 class=codeBack> <tr><td align=center class=codeBack><image src="images/sampleIcon.png" width=64 height=64> <tr><td align=center class=codeBack>Robots Invade London </table> <p>See the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword for details of how you can further modify the splash screen.
          title = getString();
        else if (key.equalsIgnoreCase("translations"))                          // <p>Offer the user a choice of languages in which the app can be played. The <a href="#sft"><bold>sourceFile.txt</bold></a> files for the translated apps should be held in folders <b>l/LC</b>below the main source file for the app where <b>LC</b> is the two letter language code as shown in: <a href="AWSPollySpeakers.html#speakersByCode">speakers by code</a>. <p>If <b>all</b> is chosen as the value of this keyword, then all the languages supported by <AWSPolly> will be offered.
          translations = getString();
        else if (key.equalsIgnoreCase("version"))                               // <p>A sentence describing what is in this version of the app. See all also the <a href="#cmdKeyDef_app_test">app.test=</a> keyword.
          version = getString();
        else if (key.equalsIgnoreCase("cmd")) break;                            // cmd - which is never the name of a keyword
       }
     }
    public String toString()                                                    //M String representation of class
     {final StringBuilder s = new StringBuilder();
      s.append(", name="+name);                                                 // A short name for this app which matches the path in your repository to the relevant <a href="#sft"><bold>sourceFile.txt</bold></a> with all the forward slashes replaced by dots. Thus, if the full name of the source file in the repository is: <p><table border=0> philiprbrenan/GoneFishing/l/en/sourcefile.txt </table> <p>then the name of the app will be: <p><table border=0> GoneFishing.l.en </table> <p>The app generation process will inform you of the correct name if you get it wrong.
      s.append(", title="+title);                                               // <p>The title for this app. This title will be displayed on the splash screen when the app starts for the first time and also under the icon representing this app on the student's phone or tablet. The title should be short, like a newspaper headline, as in: <p><table border=0 cellspacing=10 class=codeBack> <tr><td align=center class=codeBack><image src="images/sampleIcon.png" width=64 height=64> <tr><td align=center class=codeBack>Robots Invade London </table> <p>See the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword for details of how you can further modify the splash screen.
      s.append(", logoText="+logoText);                                         // <p>When the app starts for the first time it downloads its content from the Internet which might take a moment or two. The app covers any delay by showing the name of the app and the name of the sponsoring organization on the splash screen. <p> Use this keyword to show a small amount of text identifying your organization. The app will scale this text to fit the screen, so if you want the name to be in large visible letters it must contain only a few characters. Conversely, long names will be shrunk down to fit the display and will probably be unreadable. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_help"> app.help= </a> keyword.
      s.append(", help="+help);                                                 // <p>Use this keyword to specify the URL of a web page where the student can find more information about the app, its purpose, how to use it, who wrote it, the sponsoring organizations, their contact details etc. <p>See also: the <a href="#cmdKeyDef_app_title"> app.title= </a> keyword and the <a href="#cmdKeyDef_app_logoText"> app.logoText= </a> keyword.
      s.append(", ordered="+ordered);                                           // The next item to be presented to the student will be chosen in some kind of order if this keyword is coded: <p><dl> <dt>always</dt> <dd>The items tend to be presented in the order they are written in the app definition file. </dd> <dt>finally</dt> <dd>The opposite of <b>initially</b>. The items are initially presented in random order but the order is applied ever more strictly as play proceeds. </dd> <dt>initially</dt> <dd>As with <b>always</b>, the items are initially presented in order, but the order is applied less and less strictly as play proceeds. </dd> <dt>never</dt> <dd>The opposite of <b>always</b>. The order of the items is not considered to be important. This is equivalent to not coding this keyword or commenting it out.</dd> </dl>
      s.append(", levels="+levels);                                             // <p>The number of levels in the game. Each photo has a level and only comes into play when the student reaches that level of play. You can specify the level for each photo manually using the <a href="#cmdKeyDef_photo_level">photo.level=</a> keyword. Or you can use this keyword to specify the number of levels in the game and have the app generation system allocate photos to each level based on their position in <a href="#sft"><bold>sourceFile.txt</bold></a>. <p>If the number of levels is not specified it defaults to one: in this case all the photos are in play as soon as the app starts.
      s.append(", maxImages="+maxImages);                                       // <p>The maximum number of images to show in one selection at a time in the app: choose a value that reflects how many images a competent student might reasonably scan in 30 seconds
      s.append(", icon="+icon);                                                 // <p>If the URL starts with <b>https?://</b> then this is the location of the icon image on the World Wide Web from whence it will be copied and scaled to the right size. If the URL starts with <b>github:</b> it comes from the specified repository on <a href="https://github.com">GitHub</a>. Otherwise it is the name of the file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app which contains the icon for this app.
      s.append(", author="+author);                                             // <p>The name of the person who wrote this app which should be the name of the repository containing the app. Thus if the name of the repository is: <p><table border=0> philiprbrenan/GoneFishing </table> <p>then the author of the app will be: <p><table border=0> philiprbrenan </table> <p>The app generation process will inform you of the correct name if you get it wrong.
      s.append(", email="+email);                                               // <p>The email address of this app so that students have somewhere to send suggestions, corrections or complaints
      s.append(", speakers="+speakers);                                         // <p>The <a href="AWSPollySpeakers.html#speakersByName">Ids</a> of the voices to be used to speak the app or all the speakers in the language set by <a href="#cmdKeyDef_app_language">app.language=</a> keyword.
      s.append(", emphasis="+emphasis);                                         // <p>Generate slower, more emphatic speech for some items so that a student who did not understand the normal fast speech version can be given a slower, more comprehensible version on redirect. <p>Code a number for the value of this keyword: any phrase that has fewer characters than this number will cause both normal and emphasized versions of the speech to be generated. Phrases longer than this number will only cause a normal version of the speech to be generated. <p>If you omit this keyword or code a value of zero then only normal speech versions will be generated.
      s.append(", language="+language);                                         // <p>The <a href="AWSPollySpeakers.html#speakersByCode">two character code</a> which describes the language this app is written in. All the voices that speak this language will be used to speak the app unless the <a href="http://www.appaapps.com/howToWriteAnApp.html#cmdKeyDef_app_speakers">app.speakers=</a> keyword is used to specify the speakers that you actually require. <p>The one exception to this rule is English, which is spoken by just Amy and Brian unless you specify otherwise.
      s.append(", version="+version);                                           // <p>A sentence describing what is in this version of the app. See all also the <a href="#cmdKeyDef_app_test">app.test=</a> keyword.
      s.append(", test="+test);                                                 // <p>Once you have created and published an app any further successful changes to this app will be transmitted directly to your active students. You might prefer to test the new version of your app first before making the changes publicly visible. To achieve this, code: <p>test = a description of the changes <p>Once you are satisfied with the changes you have made, you should comment out this keyword as in: <p># test = a description of the changes <p>so that a succcessful generation will update all active copies of the app. You might find it helpful to update the <a href="#cmdKeyDef_app_version">app.version=</a> to describe the new features in the app for posterity. <p>Please note that <b>test</b> apps will be deleted without notice from servers to free space if necessary.
      s.append(", description="+description);                                   // <p>A slightly longer description for the app often used for the short description on <a href="https://play.google.com/store"><bold>Google Play</bold></a>.
      s.append(", rightInARow="+rightInARow);                                   // <p>The number of questions the student must answer correctly in a row to trigger race mode. <p id=normalPlayMode>In normal play the student receives new items of information every time they answer a question correctly the first time the question is posed; otherwise answers are provided for questions that the student is unable to answer correctly. <p id=raceMode>During a race, no new items of information are presented: the race continues as long as the student does not make too many mistakes or until all the items that the student has previously identified correctly have been presented. Race mode questions are presented with less delay than normal questions. <p>The race starts with well known items and with quiet background music. As the race proceeds, the music gets louder and the questions become more difficult as measured by how often the student has correctly identified the items in the past. <p>The objective of a race is to set a personal best time for completing a race through all the items in the app without errors. <p>At the end of race, the student is congratulated if they did not make too many mistakes. Play then reverts to normal mode.
      s.append(", prerequisites="+prerequisites);                               // <p>The names of apps that perhaps the user ought to play first, listed in play order separated by spaces. If the student does not appear to be making much progress with the existing app, the app will start playing one of these apps instead.
      s.append(", enables="+enables);                                           // <p>The names of apps that the user might enjoy playing after completing this app. If the student appears to have mastered all the material in this app the app will start playing one of these apps instead.
      s.append(", fullNameOnGooglePlay="+fullNameOnGooglePlay);                 // <p>The full name of the the app on <a href="https://play.google.com/store"><bold>Google Play</bold></a>. This is set by default for you to the standard value of: <b><reverseDomain>.photoapp</b>.&lt;github path to your sourceFile.txt&gt; <p>Use this keyword to change this name to something else in the unlikely event that you want to use a different name on Google Play for your app.
      s.append(", screenShots="+screenShots);                                   // <p>Screen shot mode is enabled if this keyword is present with any value or indeed no value. See: the <a href="#cmdKeyDef_photo_screenShot"> photo.screenShot= </a> keyword for full details. <p>See also the <a href="#cmdKeyDef_app_saveScreenShotsTo"> app.saveScreenShotsTo= </a> keyword for details of how to specify an alternate repository in which to save screen shots.
      s.append(", saveScreenShotsTo="+saveScreenShotsTo);                       // <p>Code this keyword in the unlikely event that if you would like screen shots taken in the app to be saved to a different <a href="https://github.com">GitHub</a> repository. Code the <a href="https://github.com">GitHub</a> user name, followed by '/', the repository name, optionally followed by a path which will be prefixed to the screen shot name. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
      s.append(", maximumRaceSize="+maximumRaceSize);                           // <p>The maximum possible number of questions that can occur in a race. Otherwise, the default is the total number of <a href="#cmdDef_photo">photo</a> commands in the app. However, the student will only be faced with the maximum possible number of questions once they have made considerable progress through the material in the app as races are restricted to information that the student has already encountered.
      s.append(", imageFormat="+imageFormat);                                   // <p>By default use the <b>jpx</b> (jpeg extended) image format to display photos at high resolution on the Android. Your <b>jpg</b> and <b>png</b> images will be automatically converted to use the <b>jpx</b> format by the app build process so no action is required of you to use this format. <p>If you do not want to use <b>jpx</b>, code this keyword with a value of <b>jpg</b> to instruct the build process to use the <b>jpg</b> format to represent images. If you supply photos in the <b>png</b> format the build process will automatically convert them to <b>jpg</b> for you for use on Android.
      s.append(", translations="+translations);                                 // <p>Offer the user a choice of languages in which the app can be played. The <a href="#sft"><bold>sourceFile.txt</bold></a> files for the translated apps should be held in folders <b>l/LC</b>below the main source file for the app where <b>LC</b> is the two letter language code as shown in: <a href="AWSPollySpeakers.html#speakersByCode">speakers by code</a>. <p>If <b>all</b> is chosen as the value of this keyword, then all the languages supported by <AWSPolly> will be offered.
      s.append(", speaker="+speaker);                                           // <p>If this keyword is present the app shows all the items in alphabetical order and says the item the user taps on. This is useful for app development and also if you have temporarily lost your voice
      return "AppCmd("+s.toString()+")";
     }
    public final int index;                                                     // Index of this AppCmd command amongst all AppCmd comands encountered
   } // AppCmd
  public AppCmd [] appCmd;                                                      // Index to commands of type AppCmd
  public int appCmdcount = 0;                                                   // The number of AppCmd commands encountered
 
  public class FactCmd extends Cmd {                                            // A fact about one or more of the photos that the student can be tested on
    public String aspect;                                                       // <p>The aspect of the photo under consideration which allows facts from different photos to be matched during the wrong/right response display. <p>The aspect of each fact is also used in race mode to test the student once the student has correctly recognized several photos and facts with the same aspect. Thus if you were writing an app about horses, and an aspect of each horse was its country of origin, then: once the student demonstrates that they know the country of origin for several horses, one or more races will occur in which the student is tested on just the country of origin for each horse.
    public String name;                                                         // A short name for this fact which will be matched against photo names as described in <a href="#matchingNames">matching names</a>
    public String remark;                                                       // An explanation of why this fact cannot be used as a question if, in fact, this fact cannot be used as a question
    public String say;                                                          // <p>The actual words that should be said by AWS Polly if this is different from the <a href="#cmdKeyDef_fact_title">fact.title=</a> keyword.
    public String sounds;                                                       // <p>If you prefer to supply your own sound files then use this keyword to specify the location of the mp3 files to use instead of generated speech. See <a href="#cmdKeyDef_photo_sounds">photo.sounds=</a> keyword for full details.
    public String title;                                                        // The text of this fact
    public String titleFile;                                                    // The file name generated from the title to contain the audio for this fact
    public String wiki;                                                         // The URL of the Wikipedia article about this fact
    public FactCmd                                                              //M Load data for FactCmd
     (int Index)                                                                //P Index of command to load
     {index = Index;                                                            // Index of this FactCmd amongst all FactCmd
      for(; !finishedManifest();)                                               // Successive items
       {final String key = getString();                                         // Keyword name
        if (false) {}
        else if (key.equalsIgnoreCase("aspect"))                                // <p>The aspect of the photo under consideration which allows facts from different photos to be matched during the wrong/right response display. <p>The aspect of each fact is also used in race mode to test the student once the student has correctly recognized several photos and facts with the same aspect. Thus if you were writing an app about horses, and an aspect of each horse was its country of origin, then: once the student demonstrates that they know the country of origin for several horses, one or more races will occur in which the student is tested on just the country of origin for each horse.
          aspect = getString();
        else if (key.equalsIgnoreCase("name"))                                  // A short name for this fact which will be matched against photo names as described in <a href="#matchingNames">matching names</a>
          name = getString();
        else if (key.equalsIgnoreCase("remark"))                                // An explanation of why this fact cannot be used as a question if, in fact, this fact cannot be used as a question
          remark = getString();
        else if (key.equalsIgnoreCase("say"))                                   // <p>The actual words that should be said by AWS Polly if this is different from the <a href="#cmdKeyDef_fact_title">fact.title=</a> keyword.
          say = getString();
        else if (key.equalsIgnoreCase("sounds"))                                // <p>If you prefer to supply your own sound files then use this keyword to specify the location of the mp3 files to use instead of generated speech. See <a href="#cmdKeyDef_photo_sounds">photo.sounds=</a> keyword for full details.
          sounds = getString();
        else if (key.equalsIgnoreCase("title"))                                 // The text of this fact
          title = getString();
        else if (key.equalsIgnoreCase("titleFile"))                             // The file name generated from the title to contain the audio for this fact
          titleFile = getString();
        else if (key.equalsIgnoreCase("wiki"))                                  // The URL of the Wikipedia article about this fact
          wiki = getString();
        else if (key.equalsIgnoreCase("cmd")) break;                            // cmd - which is never the name of a keyword
       }
     }
    public String toString()                                                    //M String representation of class
     {final StringBuilder s = new StringBuilder();
      s.append(", name="+name);                                                 // A short name for this fact which will be matched against photo names as described in <a href="#matchingNames">matching names</a>
      s.append(", title="+title);                                               // The text of this fact
      s.append(", titleFile="+titleFile);                                       // The file name generated from the title to contain the audio for this fact
      s.append(", remark="+remark);                                             // An explanation of why this fact cannot be used as a question if, in fact, this fact cannot be used as a question
      s.append(", wiki="+wiki);                                                 // The URL of the Wikipedia article about this fact
      s.append(", aspect="+aspect);                                             // <p>The aspect of the photo under consideration which allows facts from different photos to be matched during the wrong/right response display. <p>The aspect of each fact is also used in race mode to test the student once the student has correctly recognized several photos and facts with the same aspect. Thus if you were writing an app about horses, and an aspect of each horse was its country of origin, then: once the student demonstrates that they know the country of origin for several horses, one or more races will occur in which the student is tested on just the country of origin for each horse.
      s.append(", say="+say);                                                   // <p>The actual words that should be said by AWS Polly if this is different from the <a href="#cmdKeyDef_fact_title">fact.title=</a> keyword.
      s.append(", sounds="+sounds);                                             // <p>If you prefer to supply your own sound files then use this keyword to specify the location of the mp3 files to use instead of generated speech. See <a href="#cmdKeyDef_photo_sounds">photo.sounds=</a> keyword for full details.
      return "FactCmd("+s.toString()+")";
     }
    public final int index;                                                     // Index of this FactCmd command amongst all FactCmd comands encountered
   } // FactCmd
  public FactCmd [] factCmd;                                                    // Index to commands of type FactCmd
  public int factCmdcount = 0;                                                  // The number of FactCmd commands encountered
 
  public class PhotoCmd extends Cmd {                                           // Description of a photo that illustrates one or more facts
    public String aFewChars;                                                    // <p>One or two characters to display in the centre of the screen either in lieu of a photo or on top of a photo in alphabet and number games
    public Integer height;                                                      // Height of the image in pixels
    public Integer level;                                                       // <p>The level of play at which the student is introduced to this photo and its related facts. If no level is associated with a photo or it has a level of 1 then the photo is introduced at the first level of play. <p>See also: <a href="#cmdKeyDef_app_levels">app.levels=</a> for an automated way of setting the levels of all the photos in the app.
    public String maps;                                                         // Optional URL showing a map of where this photo was taken
    public String name;                                                         // <p>A short name for this photo which will be matched against fact names as described in <a href="#matchingNames">matching names</a>.
    public String pointsOfInterest;                                             // <p>Indicate points of interest in a photo by coding the fractional coordinates of each point of interest as percentages from left to right and top to bottom of the photo separated by white space. <p>For example, the centre of the upper right quadrant is: <pre> 75 25 </pre> <p>The points of interest should be coded in order of decreasing interest, for example: if the centre is the most interesting point in the photo followed by the centre of the upper right quadrant, then code: <pre> 50 50 75 25 </pre> <p>All characters that are not the digits 0..9 will be converted to white space, which means that the above could be coded as: <pre> (50x50), [75 25]; </pre> <p>Any missing coordinates will be assumed to have a value of 50 <p>Points of interest are used (amongst other things) to centre screen shots, as far as possible, on the most interesting point in the photo.
    public String say;                                                          // <p>The actual sequence that should be said by <AWSPolly> if this is different from the content of the <a href="#cmdKeyDef_photo_title">photo.title=</a> keyword. <p><AWSPolly> uses: <a href="https://www.w3.org/TR/2010/REC-speech-synthesis11-20100907/"> Speech Synthesis Markup Language </a> which can be supplied using this keyword <p>Please note that the <a href="#cmdKeyDef_photo_title"> title of the photo</a> is shown in text on some screens, so if this keyword is used the two might diverge.
    public String screenShot;                                                   // <p>Code this keyword if you would like this photo to be made into a screen shot. You will need screen shots to upload your app to distribution web sites. This keyword gives you a convenient way to mark the photos in your app that would make the best screen shots. <p>To actually take screen shots you will needs to code the <a href="#cmdKeyDef_app_screenShots">app.screenShots=</a> keyword to temporarily enable screen shot mode. During screen shot mode, the app shows just the indicated items either centered on their <a href="#cmdKeyDef_photo_pointsOfInterest"> first point of interest</a> or moving so slowly that you can manually swipe the screen to take the shot when the photo is best presented on the screen. <p>By default the screen shots will be placed in your <a href="https://github.com">GitHub</a> repository in: <pre> out/screenShots/photoname.jpg. </pre> <p>However, you can specify an alternate repository in to which screen shots are to be saved, see the <a href="#cmdKeyDef_app_saveScreenShotsTo">app.saveScreenShotsTo=</a> keyword for details. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
    public String sounds;                                                       // <p>If you prefer to supply your own sound files instead of having speech generated for you: <ol> <li>Create a folder in your repository called <b>sounds/</b>. <li>Record and edit the sound files you wish to use in <b>mp3</b> format, perhaps using: <a href="https://play.google.com/store/apps/details?id=com.coffeebeanventures.easyvoicerecorder">Easy voice recorder</a> or: <a href="http://www.audacityteam.org/">Audacity</a>. <li>Upload the sound files to the <b>sounds/</b> folder in the your <a href="https://github.com">GitHub</a> repository. <li>Code the names of the sound files as the value of this keyword. The names should not contain spaces or commas. The names should be separated by spaces and/or commas. </ol> <p>Alternatively specify urls starting with <b>http(s):</b> locating an mp3 file to use as the sounds for this photo. <p>The recorded sound will then be played instead of any generated speech. <p>See also <a href="#cmdKeyDef_fact_sounds">fact.sounds=</a> keyword
    public String title;                                                        // <p>The title for this photo. Take care not to use a question! The title of the photo will be used as both a question and an answer by the app and so if you add words such "Is this" or punctuation such as "?" to make it a question then the usage as a question might work, but the usage as an answer will not. <p>The title should be as short as is feasible. If the title contains redundant text which is repeated from photo to photo, then the app becomes an app for teaching the student the redundant text rather than the original material as it is the redundant text that the student will hear the most and thus learn the first. <p>This gives rise to the most important rule of educational game development: <b>everything must change except the truth</b>. <p>Use the <a href="#cmdKeyDef_photo_say">photo.say=</a> keyword if you wish to say something other than the title when describing the photo.
    public String titleFile;                                                    // The file name generated from the title to contain the audio/image for this photo
    public String url;                                                          // <p>If the URL starts with <b>https?://</b> then this is the location of the image on the World Wide Web from whence it will be copied. For example: <pre> https://upload.wikimedia.org/wikipedia/en/7/7d/Bliss.png </pre> <p>If the URL starts with <b>github://</b> then this is the location of the image in another GitHub repository: code the user name, '/', repository name, '/', followed by the path in the repository to the image file. For example: <pre> github://philiprbrenan/vocabulary-1/images/Ant.jpg </pre> <p>Otherwise it is the name of a file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app. For example: <pre> Ant.jpg </pre> <p>Photos should be high resolution: crop the photo to centre the object of interest and remove extraneous details. <p>The app will move long thin or tall narrow photos around on the screen so that the student can see all of their contents. This leads to a motion effect which is desirable for apps about skyscrapers, airplanes, bridges, boats, trees etc. as it adds realism. To reduce this effect: crop the photos into squares, to accentuate it: stick photos together in a long line. <p>The student will be able to pan and zoom the photos in the app to see fine details so it is worth using high resolution photos to facilitate this capability. Conversely, low resolution photos will pixellate if the student zooms them. <p>If you include identifiable people in your photos in an app you should get signed model releases from the persons involved.
    public Integer width;                                                       // Width of the image in pixels
    public String wiki;                                                         // The URL of the Wikipedia article describing the concept this photo illustrates
    public PhotoCmd                                                             //M Load data for PhotoCmd
     (int Index)                                                                //P Index of command to load
     {index = Index;                                                            // Index of this PhotoCmd amongst all PhotoCmd
      for(; !finishedManifest();)                                               // Successive items
       {final String key = getString();                                         // Keyword name
        if (false) {}
        else if (key.equalsIgnoreCase("aFewChars"))                             // <p>One or two characters to display in the centre of the screen either in lieu of a photo or on top of a photo in alphabet and number games
          aFewChars = getString();
        else if (key.equalsIgnoreCase("height"))                                // Height of the image in pixels
          height = getInteger();
        else if (key.equalsIgnoreCase("level"))                                 // <p>The level of play at which the student is introduced to this photo and its related facts. If no level is associated with a photo or it has a level of 1 then the photo is introduced at the first level of play. <p>See also: <a href="#cmdKeyDef_app_levels">app.levels=</a> for an automated way of setting the levels of all the photos in the app.
          level = getInteger();
        else if (key.equalsIgnoreCase("maps"))                                  // Optional URL showing a map of where this photo was taken
          maps = getString();
        else if (key.equalsIgnoreCase("name"))                                  // <p>A short name for this photo which will be matched against fact names as described in <a href="#matchingNames">matching names</a>.
          name = getString();
        else if (key.equalsIgnoreCase("pointsOfInterest"))                      // <p>Indicate points of interest in a photo by coding the fractional coordinates of each point of interest as percentages from left to right and top to bottom of the photo separated by white space. <p>For example, the centre of the upper right quadrant is: <pre> 75 25 </pre> <p>The points of interest should be coded in order of decreasing interest, for example: if the centre is the most interesting point in the photo followed by the centre of the upper right quadrant, then code: <pre> 50 50 75 25 </pre> <p>All characters that are not the digits 0..9 will be converted to white space, which means that the above could be coded as: <pre> (50x50), [75 25]; </pre> <p>Any missing coordinates will be assumed to have a value of 50 <p>Points of interest are used (amongst other things) to centre screen shots, as far as possible, on the most interesting point in the photo.
          pointsOfInterest = getString();
        else if (key.equalsIgnoreCase("say"))                                   // <p>The actual sequence that should be said by <AWSPolly> if this is different from the content of the <a href="#cmdKeyDef_photo_title">photo.title=</a> keyword. <p><AWSPolly> uses: <a href="https://www.w3.org/TR/2010/REC-speech-synthesis11-20100907/"> Speech Synthesis Markup Language </a> which can be supplied using this keyword <p>Please note that the <a href="#cmdKeyDef_photo_title"> title of the photo</a> is shown in text on some screens, so if this keyword is used the two might diverge.
          say = getString();
        else if (key.equalsIgnoreCase("screenShot"))                            // <p>Code this keyword if you would like this photo to be made into a screen shot. You will need screen shots to upload your app to distribution web sites. This keyword gives you a convenient way to mark the photos in your app that would make the best screen shots. <p>To actually take screen shots you will needs to code the <a href="#cmdKeyDef_app_screenShots">app.screenShots=</a> keyword to temporarily enable screen shot mode. During screen shot mode, the app shows just the indicated items either centered on their <a href="#cmdKeyDef_photo_pointsOfInterest"> first point of interest</a> or moving so slowly that you can manually swipe the screen to take the shot when the photo is best presented on the screen. <p>By default the screen shots will be placed in your <a href="https://github.com">GitHub</a> repository in: <pre> out/screenShots/photoname.jpg. </pre> <p>However, you can specify an alternate repository in to which screen shots are to be saved, see the <a href="#cmdKeyDef_app_saveScreenShotsTo">app.saveScreenShotsTo=</a> keyword for details. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
          screenShot = getString();
        else if (key.equalsIgnoreCase("sounds"))                                // <p>If you prefer to supply your own sound files instead of having speech generated for you: <ol> <li>Create a folder in your repository called <b>sounds/</b>. <li>Record and edit the sound files you wish to use in <b>mp3</b> format, perhaps using: <a href="https://play.google.com/store/apps/details?id=com.coffeebeanventures.easyvoicerecorder">Easy voice recorder</a> or: <a href="http://www.audacityteam.org/">Audacity</a>. <li>Upload the sound files to the <b>sounds/</b> folder in the your <a href="https://github.com">GitHub</a> repository. <li>Code the names of the sound files as the value of this keyword. The names should not contain spaces or commas. The names should be separated by spaces and/or commas. </ol> <p>Alternatively specify urls starting with <b>http(s):</b> locating an mp3 file to use as the sounds for this photo. <p>The recorded sound will then be played instead of any generated speech. <p>See also <a href="#cmdKeyDef_fact_sounds">fact.sounds=</a> keyword
          sounds = getString();
        else if (key.equalsIgnoreCase("title"))                                 // <p>The title for this photo. Take care not to use a question! The title of the photo will be used as both a question and an answer by the app and so if you add words such "Is this" or punctuation such as "?" to make it a question then the usage as a question might work, but the usage as an answer will not. <p>The title should be as short as is feasible. If the title contains redundant text which is repeated from photo to photo, then the app becomes an app for teaching the student the redundant text rather than the original material as it is the redundant text that the student will hear the most and thus learn the first. <p>This gives rise to the most important rule of educational game development: <b>everything must change except the truth</b>. <p>Use the <a href="#cmdKeyDef_photo_say">photo.say=</a> keyword if you wish to say something other than the title when describing the photo.
          title = getString();
        else if (key.equalsIgnoreCase("titleFile"))                             // The file name generated from the title to contain the audio/image for this photo
          titleFile = getString();
        else if (key.equalsIgnoreCase("url"))                                   // <p>If the URL starts with <b>https?://</b> then this is the location of the image on the World Wide Web from whence it will be copied. For example: <pre> https://upload.wikimedia.org/wikipedia/en/7/7d/Bliss.png </pre> <p>If the URL starts with <b>github://</b> then this is the location of the image in another GitHub repository: code the user name, '/', repository name, '/', followed by the path in the repository to the image file. For example: <pre> github://philiprbrenan/vocabulary-1/images/Ant.jpg </pre> <p>Otherwise it is the name of a file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app. For example: <pre> Ant.jpg </pre> <p>Photos should be high resolution: crop the photo to centre the object of interest and remove extraneous details. <p>The app will move long thin or tall narrow photos around on the screen so that the student can see all of their contents. This leads to a motion effect which is desirable for apps about skyscrapers, airplanes, bridges, boats, trees etc. as it adds realism. To reduce this effect: crop the photos into squares, to accentuate it: stick photos together in a long line. <p>The student will be able to pan and zoom the photos in the app to see fine details so it is worth using high resolution photos to facilitate this capability. Conversely, low resolution photos will pixellate if the student zooms them. <p>If you include identifiable people in your photos in an app you should get signed model releases from the persons involved.
          url = getString();
        else if (key.equalsIgnoreCase("width"))                                 // Width of the image in pixels
          width = getInteger();
        else if (key.equalsIgnoreCase("wiki"))                                  // The URL of the Wikipedia article describing the concept this photo illustrates
          wiki = getString();
        else if (key.equalsIgnoreCase("cmd")) break;                            // cmd - which is never the name of a keyword
       }
     }
    public String toString()                                                    //M String representation of class
     {final StringBuilder s = new StringBuilder();
      s.append(", name="+name);                                                 // <p>A short name for this photo which will be matched against fact names as described in <a href="#matchingNames">matching names</a>.
      s.append(", title="+title);                                               // <p>The title for this photo. Take care not to use a question! The title of the photo will be used as both a question and an answer by the app and so if you add words such "Is this" or punctuation such as "?" to make it a question then the usage as a question might work, but the usage as an answer will not. <p>The title should be as short as is feasible. If the title contains redundant text which is repeated from photo to photo, then the app becomes an app for teaching the student the redundant text rather than the original material as it is the redundant text that the student will hear the most and thus learn the first. <p>This gives rise to the most important rule of educational game development: <b>everything must change except the truth</b>. <p>Use the <a href="#cmdKeyDef_photo_say">photo.say=</a> keyword if you wish to say something other than the title when describing the photo.
      s.append(", titleFile="+titleFile);                                       // The file name generated from the title to contain the audio/image for this photo
      s.append(", maps="+maps);                                                 // Optional URL showing a map of where this photo was taken
      s.append(", width="+width);                                               // Width of the image in pixels
      s.append(", height="+height);                                             // Height of the image in pixels
      s.append(", wiki="+wiki);                                                 // The URL of the Wikipedia article describing the concept this photo illustrates
      s.append(", aFewChars="+aFewChars);                                       // <p>One or two characters to display in the centre of the screen either in lieu of a photo or on top of a photo in alphabet and number games
      s.append(", url="+url);                                                   // <p>If the URL starts with <b>https?://</b> then this is the location of the image on the World Wide Web from whence it will be copied. For example: <pre> https://upload.wikimedia.org/wikipedia/en/7/7d/Bliss.png </pre> <p>If the URL starts with <b>github://</b> then this is the location of the image in another GitHub repository: code the user name, '/', repository name, '/', followed by the path in the repository to the image file. For example: <pre> github://philiprbrenan/vocabulary-1/images/Ant.jpg </pre> <p>Otherwise it is the name of a file in the <a href="#atip">images</a> folder in the <a href="https://github.com">GitHub</a> repository for this app. For example: <pre> Ant.jpg </pre> <p>Photos should be high resolution: crop the photo to centre the object of interest and remove extraneous details. <p>The app will move long thin or tall narrow photos around on the screen so that the student can see all of their contents. This leads to a motion effect which is desirable for apps about skyscrapers, airplanes, bridges, boats, trees etc. as it adds realism. To reduce this effect: crop the photos into squares, to accentuate it: stick photos together in a long line. <p>The student will be able to pan and zoom the photos in the app to see fine details so it is worth using high resolution photos to facilitate this capability. Conversely, low resolution photos will pixellate if the student zooms them. <p>If you include identifiable people in your photos in an app you should get signed model releases from the persons involved.
      s.append(", say="+say);                                                   // <p>The actual sequence that should be said by <AWSPolly> if this is different from the content of the <a href="#cmdKeyDef_photo_title">photo.title=</a> keyword. <p><AWSPolly> uses: <a href="https://www.w3.org/TR/2010/REC-speech-synthesis11-20100907/"> Speech Synthesis Markup Language </a> which can be supplied using this keyword <p>Please note that the <a href="#cmdKeyDef_photo_title"> title of the photo</a> is shown in text on some screens, so if this keyword is used the two might diverge.
      s.append(", sounds="+sounds);                                             // <p>If you prefer to supply your own sound files instead of having speech generated for you: <ol> <li>Create a folder in your repository called <b>sounds/</b>. <li>Record and edit the sound files you wish to use in <b>mp3</b> format, perhaps using: <a href="https://play.google.com/store/apps/details?id=com.coffeebeanventures.easyvoicerecorder">Easy voice recorder</a> or: <a href="http://www.audacityteam.org/">Audacity</a>. <li>Upload the sound files to the <b>sounds/</b> folder in the your <a href="https://github.com">GitHub</a> repository. <li>Code the names of the sound files as the value of this keyword. The names should not contain spaces or commas. The names should be separated by spaces and/or commas. </ol> <p>Alternatively specify urls starting with <b>http(s):</b> locating an mp3 file to use as the sounds for this photo. <p>The recorded sound will then be played instead of any generated speech. <p>See also <a href="#cmdKeyDef_fact_sounds">fact.sounds=</a> keyword
      s.append(", level="+level);                                               // <p>The level of play at which the student is introduced to this photo and its related facts. If no level is associated with a photo or it has a level of 1 then the photo is introduced at the first level of play. <p>See also: <a href="#cmdKeyDef_app_levels">app.levels=</a> for an automated way of setting the levels of all the photos in the app.
      s.append(", screenShot="+screenShot);                                     // <p>Code this keyword if you would like this photo to be made into a screen shot. You will need screen shots to upload your app to distribution web sites. This keyword gives you a convenient way to mark the photos in your app that would make the best screen shots. <p>To actually take screen shots you will needs to code the <a href="#cmdKeyDef_app_screenShots">app.screenShots=</a> keyword to temporarily enable screen shot mode. During screen shot mode, the app shows just the indicated items either centered on their <a href="#cmdKeyDef_photo_pointsOfInterest"> first point of interest</a> or moving so slowly that you can manually swipe the screen to take the shot when the photo is best presented on the screen. <p>By default the screen shots will be placed in your <a href="https://github.com">GitHub</a> repository in: <pre> out/screenShots/photoname.jpg. </pre> <p>However, you can specify an alternate repository in to which screen shots are to be saved, see the <a href="#cmdKeyDef_app_saveScreenShotsTo">app.saveScreenShotsTo=</a> keyword for details. <p>This feature only works for the first two hours after an app has been created: after that the app plays normally.
      s.append(", pointsOfInterest="+pointsOfInterest);                         // <p>Indicate points of interest in a photo by coding the fractional coordinates of each point of interest as percentages from left to right and top to bottom of the photo separated by white space. <p>For example, the centre of the upper right quadrant is: <pre> 75 25 </pre> <p>The points of interest should be coded in order of decreasing interest, for example: if the centre is the most interesting point in the photo followed by the centre of the upper right quadrant, then code: <pre> 50 50 75 25 </pre> <p>All characters that are not the digits 0..9 will be converted to white space, which means that the above could be coded as: <pre> (50x50), [75 25]; </pre> <p>Any missing coordinates will be assumed to have a value of 50 <p>Points of interest are used (amongst other things) to centre screen shots, as far as possible, on the most interesting point in the photo.
      return "PhotoCmd("+s.toString()+")";
     }
    public final int index;                                                     // Index of this PhotoCmd command amongst all PhotoCmd comands encountered
   } // PhotoCmd
  public PhotoCmd [] photoCmd;                                                  // Index to commands of type PhotoCmd
  public int photoCmdcount = 0;                                                 // The number of PhotoCmd commands encountered
 
  public class PhotoFactCmd extends Cmd {                                       // The association between a named photo and a named fact
    public String name;                                                         // The name of the photo
    public String title;                                                        // The name of the fact
    public PhotoFactCmd                                                         //M Load data for PhotoFactCmd
     (int Index)                                                                //P Index of command to load
     {index = Index;                                                            // Index of this PhotoFactCmd amongst all PhotoFactCmd
      for(; !finishedManifest();)                                               // Successive items
       {final String key = getString();                                         // Keyword name
        if (false) {}
        else if (key.equalsIgnoreCase("name"))                                  // The name of the photo
          name = getString();
        else if (key.equalsIgnoreCase("title"))                                 // The name of the fact
          title = getString();
        else if (key.equalsIgnoreCase("cmd")) break;                            // cmd - which is never the name of a keyword
       }
     }
    public String toString()                                                    //M String representation of class
     {final StringBuilder s = new StringBuilder();
      s.append(", name="+name);                                                 // The name of the photo
      s.append(", title="+title);                                               // The name of the fact
      return "PhotoFactCmd("+s.toString()+")";
     }
    public final int index;                                                     // Index of this PhotoFactCmd command amongst all PhotoFactCmd comands encountered
   } // PhotoFactCmd
  public PhotoFactCmd [] photoFactCmd;                                          // Index to commands of type PhotoFactCmd
  public int photoFactCmdcount = 0;                                             // The number of PhotoFactCmd commands encountered

  public Unpackappdescription                                                   //c Construct the unpacker
   (final File[]zipFile)                                                        //P The name of the Zip file containing the app
   {this.zipFile = zipFile;
   }

  public void parseManifest                                                     //M Parse manifest held in Content
   (final byte[]ManifestContent)                                                //P Byte content of manifest
   {manifestContent = ManifestContent;
    final int nCmds = getInteger();                                             // The first item is the number of commands
    cmds = new Cmd[nCmds];
    int cmdOffSet = 0;
    getString();                                                                // Skip the first cmd word
    for(; !finishedManifest();)                                                 // Process the stream of bytes
     {final String c = getString();                                             // Command name
      if (false) {}
      else if (c.equalsIgnoreCase("app"))cmds[cmdOffSet++] = new AppCmd(appCmdcount++);// Load command AppCmd and record the number of such commands seen
      else if (c.equalsIgnoreCase("photo"))cmds[cmdOffSet++] = new PhotoCmd(photoCmdcount++);// Load command PhotoCmd and record the number of such commands seen
      else if (c.equalsIgnoreCase("fact"))cmds[cmdOffSet++] = new FactCmd(factCmdcount++);// Load command FactCmd and record the number of such commands seen
      else if (c.equalsIgnoreCase("photoFact"))cmds[cmdOffSet++] = new PhotoFactCmd(photoFactCmdcount++);// Load command PhotoFactCmd and record the number of such commands seen
      else break;                                                               // Ignore unknown commands to process future data
     } // while
    appCmd = new AppCmd[appCmdcount];
    for(int i = 0, j = 0; i < cmds.length; ++i)
     {if (cmds[i] instanceof AppCmd) appCmd[j++] = (AppCmd)cmds[i];
     }
    photoCmd = new PhotoCmd[photoCmdcount];
    for(int i = 0, j = 0; i < cmds.length; ++i)
     {if (cmds[i] instanceof PhotoCmd) photoCmd[j++] = (PhotoCmd)cmds[i];
     }
    factCmd = new FactCmd[factCmdcount];
    for(int i = 0, j = 0; i < cmds.length; ++i)
     {if (cmds[i] instanceof FactCmd) factCmd[j++] = (FactCmd)cmds[i];
     }
    photoFactCmd = new PhotoFactCmd[photoFactCmdcount];
    for(int i = 0, j = 0; i < cmds.length; ++i)
     {if (cmds[i] instanceof PhotoFactCmd) photoFactCmd[j++] = (PhotoFactCmd)cmds[i];
     }
    loadPhotoFacts();                                                           // Load the photos multiplied by the facts table
    mainAppCmd = appCmd[0];                                                     // Only one app cmd per app so we can address it directly
   }

  public void run()                                                             //M Unpack the specified zip file to create the data structures describing the contained app
   {final TreeMap<String,byte[]> byteContent =                                  // The content of each zip file entry in each file
      new TreeMap<String,byte[]>();
    final Stack<Thread>thread = new Stack<Thread>();                            // Unzip each zip file on a separate thread
    final Unpackappdescription unpack = this;

    for(File z: zipFile)
     {final String Z = z.toString();
      final Unzip u = new Unzip(z.toString())                                   // Unzip the supplied zip files
       {public void zipEntry                                                    // Save each entry as it is read out of the zip file
         (final String name,                                                    // Name of the zip entry
          final byte[]content)                                                  // Content as bytes
         {synchronized(byteContent) {byteContent.put(name, content);}
         }
        public void failed()                                                    //M An exception occurred during the unzip
         {unpack.failed("Unzip of "+Z+" failed because: "+exception);
         }
       };
      thread.push(u);
      u.start();
     }

    for(Thread t: thread) try {t.join();} catch(Exception e) {}                 // Wait for the unzips to complete

    final String manifest = "aaaManifest.data";                                 // Get manifest
    final byte[] content = byteContent.get(manifest);

    if (content != null)                                                        // Process manifest if present
     {parseManifest(content);                                                   // Parse the content of the manifest
      speakers = mainAppCmd.speakers.split("\\s+");                           // List of speakers for this app
      final String  fmt = mainAppCmd.imageFormat;                               // Image format
      final boolean jpx = fmt != null && fmt.equalsIgnoreCase("jpx");           // Jpx image format

      for(PhotoCmd p: photoCmd)                                                 // Each photo
       {final String i = "images/"+p.name;                                     // Image name
        p.photoBytes   = jpx ?                                                  // Create photoBytes
          new PhotoBytesJpx(byteContent, i):                                    // Photo content - jpx format
          new PhotoBytesJP (byteContent.get(i+".jpg"));                   // Photo content - jpg/png
        soundsBySpeaker(byteContent, p, p.titleFile, p.sounds);                 // Each speaker saying the photo title or use the sound file supplied by the author if present
       }

      for(FactCmd f: factCmd)                                                   // Each fact
       {final String F = f.titleFile, S = f.sounds;                             // File generated from title of fact, sound file if present
        soundsBySpeaker(byteContent, f, F, S);                                  // Load each speaker saying the fact or use the sound file supplied by the author if present
       }
      finished();                                                               // Report that the zip file has been unpacked and the manifest has been parsed
     }
    else
     {failed("No entry aaaManifest.data in zip file "+zipFile);                 // Report that the manifest file is missing
     }
   }

  private void soundsBySpeaker                                                  //M Speech by each speaker for each photo title and fact
    (final TreeMap<String,byte[]> byteContent,                                  // Byte content tree
     final Cmd                    cmd,                                          //P Command photo/fact being unpacked
     final String                 titleFile,                                    //P File associated with sound
     final String                 soundFile)                                    //P The value of the sound keyword if supplied for this photo or fact - if it was supplied this indicates that the sound will be chosen from the sounds folder not the speaker folder
   {cmd.soundBytes = new TreeMap<String,byte[]>();                              // Speech by speakers

    if (soundFile != null)                                                      // Save sound file
     {for (String sound : soundFile.split("\\s+"))                            // Parse sound files
       {final String e = "audio/sounds/"+sound;                         // Zip entry holding sound
        final byte[] b = byteContent.get(e);                                    // Content for this sound
        final String s = "sounds/"+sound;                                      // Sound file name
        cmd.soundBytes.put(s, b);                                               // Save sound under sounds/ in the tree of sounds for this photo or fact
       }
     }
    else                                                                        // Save generated speech by speaker and emphasis
     {for(String s: speakers)                                                   // Each speaker saying the fact
       {byte[] B = null;                                                        // Last speech variant encountered - the first variant is always generated so there should be at least one
        for(String v: speechEmphasis)                                           // Variant on each speech
         {final String e = "audio/"+s+"/"+v+"/"+titleFile+".mp3";  // Zip entry holding speech
          final byte[] b = byteContent.get(e);                                  // Content for this speaker
          if (b != null) B = b;                                                 // Use last variant if no speech for this variant
          if (B != null) cmd.soundBytes.put(s+v, B);                            // Sound by speaker and variant
         }
       }
     }
   }

// Observe progress
  public void finished()                                                        //M Override called when the app has been unpacked and its manifest has been parsed
   {}

  public void failed                                                            // Override called if an error occurs during the processing of the zip file and the parsing of the manifest
   (final String message)                                                       // Message describing failure
   {say(message);
   }

// Testing
  public static void main(String[] args)                                        //m Test
   {final String[]c = {"a", "i", "m", "t"};                                     // Create file names
    final File[]file = new File[c.length];
    for(int i = 0; i < c.length; ++i) file[i] = new File("zip/"+c[i]+".zip");
    final Unpackappdescription g = new Unpackappdescription(file)               // Create app description
     {public void finished()                                                    // Check results
       {for(String s: speakers)                                                 // Each speaker saying the fact
         {for(String v: speechEmphasis)                                         // Each speech variant
           {final String sv = s+v;                                              // Speaker + variant
            for(PhotoCmd p: photoCmd)                                           // Each photo
             {final byte[] b = p.soundBytes.get(s+v);                           // Content for this speaker and variant
              if (b != null)
               {say("PHOTO ", p.index, " ", sv, " ", p.name, " ", b.length);    // Check we got some sound bytes for each photo
               }
              else
               {say("PHOTO SPEECH MISSING: ", p.index, " ", sv, " ", p.name);   // Complain about missing sound file for photo
               }
             }
            for(FactCmd f: factCmd)                                             // Each fact
             {final byte[] b = f.soundBytes.get(sv);                            // Content for this speaker and variant
              if (b != null)
               {say("FACT ", f.index, " ", sv, " ", f.name, " ", b.length);     // Check we got some sound bytes for each fact
               }
              else
               {say("FACT SPEECH MISSING: ", f.index, " ", sv, " ", f.name);    // Complain about missing sound file for fact
               }
             }
           }
         }
        for(PhotoFact pf: photoFacts)
         {say("PHOTO FACT ", pf.photoCmd.name, " ", pf.factCmd.name, " ");      // Each photo fact
         }
       }
     };
    g.start();                                                                  // Start parse of app description
   }

  static void say                                                               //M Say things
   (Object...O)                                                                 //P Things to say
   {final StringBuilder b = new StringBuilder();
    for(Object o: O) b.append(o.toString());
    System.err.println(b.toString());
   }
 } // Unpackappdescription